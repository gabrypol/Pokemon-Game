{"version":3,"sources":["Card.js","CardDeck.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Card","imgSrc","this","props","id","padStart","className","name","src","alt","type","exp","Component","CardDeck","title","isWinner","pokemon","map","pokem","base_experience","key","Game","hand1","hand2","length","randomIndex","Math","floor","random","randomPokemon","splice","push","experienceHand1","reduce","accumulator","experienceHand2","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUAqBeA,G,uLAdP,IAAIC,EAAM,UAJD,8DAIC,QAAkBC,KAAKC,MAAMC,GAAK,IAAIC,SAAS,EAAG,KAAlD,QACV,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,cAAd,IAA6BJ,KAAKC,MAAMI,KAAxC,KACA,yBAAKD,UAAU,cACX,yBAAKE,IAAKP,EAAQQ,IAAKP,KAAKC,MAAMI,QAEtC,yBAAKD,UAAU,aAAf,UAAmCJ,KAAKC,MAAMO,KAA9C,KACA,yBAAKJ,UAAU,aAAf,gBAAyCJ,KAAKC,MAAMQ,IAApD,U,GAVGC,cC2BJC,G,uLA1BP,IAAIC,EAMJ,OAJIA,EADDZ,KAAKC,MAAMY,SACF,wBAAIT,UAAU,mBAAd,mBAEA,wBAAIA,UAAU,kBAAd,kBAGR,yBAAKA,UAAU,YACVQ,EACD,wBAAIR,UAAU,gBAAd,sBAAiDJ,KAAKC,MAAMQ,IAA5D,KACA,yBAAKL,UAAU,kBACVJ,KAAKC,MAAMa,QAAQC,KAAI,SAAAC,GAAK,OACzB,kBAAC,EAAD,CACId,GAAIc,EAAMd,GACVG,KAAMW,EAAMX,KACZG,KAAMQ,EAAMR,KACZC,IAAKO,EAAMC,gBACXC,IAAKF,EAAMd,c,GAnBhBQ,cCDjBS,E,iLAgBE,IAFA,IAAIC,EAAQ,GACRC,EAAK,YAAOrB,KAAKC,MAAMa,SACpBM,EAAME,OAASD,EAAMC,QAAQ,CAChC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMC,QAC/CK,EAAgBN,EAAMO,OAAOL,EAAa,GAAG,GACjDH,EAAMS,KAAKF,GAEf,IAAIG,EAAkBV,EAAMW,QAAO,SAACC,EAAalB,GAAd,OAA0BkB,EAAclB,EAAQG,kBAAiB,GAChGgB,EAAkBZ,EAAMU,QAAO,SAACC,EAAalB,GAAd,OAA0BkB,EAAclB,EAAQG,kBAAiB,GAEpG,OACI,6BACI,kBAAC,EAAD,CACIH,QAASM,EACTX,IAAKqB,EACLjB,SAAUiB,EAAkBG,IAEhC,kBAAC,EAAD,CACInB,QAASO,EACTZ,IAAKwB,EACLpB,SAAUiB,EAAkBG,S,GAlC7BvB,aAAbS,EACKe,aAAe,CAClBpB,QAAS,CACL,CAACZ,GAAI,EAAGG,KAAM,aAAcG,KAAM,OAAQS,gBAAiB,IAC3D,CAACf,GAAI,EAAGG,KAAM,WAAYG,KAAM,QAASS,gBAAiB,IAC1D,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,MAAOS,gBAAiB,IACxD,CAACf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,KAC9D,CAACf,GAAI,GAAIG,KAAM,UAAWG,KAAM,WAAYS,gBAAiB,KAC7D,CAACf,GAAI,GAAIG,KAAM,aAAcG,KAAM,SAAUS,gBAAiB,IAC9D,CAACf,GAAI,GAAIG,KAAM,SAAUG,KAAM,SAAUS,gBAAiB,KAC1D,CAACf,GAAI,IAAKG,KAAM,QAASG,KAAM,SAAUS,gBAAiB,MA+BvDE,Q,MC9BAgB,MATf,WACE,OACE,yBAAK/B,UAAU,OACb,6DACA,kBAAC,EAAD,QCGcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f581882c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Card.css';\n\nconst IMG_LINK = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/';\n\nclass Card extends Component {\n    render(){\n        let imgSrc = `${IMG_LINK}${(this.props.id + '').padStart(3, '0')}.png`;\n        return(\n            <div className='Card'>\n                <h1 className='Card-title'> {this.props.name} </h1>\n                <div className='Card-image'>\n                    <img src={imgSrc} alt={this.props.name}/> \n                </div>\n                <div className='Card-data'> Type: {this.props.type} </div>\n                <div className='Card-data'> Experience: {this.props.exp} </div>\n            </div>\n        )\n    }\n}\n\nexport default Card;\n\n","import React, { Component } from 'react';\nimport Card from './Card';\nimport './CardDeck.css';\n\nclass CardDeck extends Component {\n    render(){\n        let title;\n        if(this.props.isWinner) {\n            title = <h1 className='CardDeck-winner'> Winning Hand! </h1>\n        } else {\n            title = <h1 className='CardDeck-loser'> Losing Hand! </h1>\n        }\n        return(\n            <div className='CardDeck'>\n                {title}\n                <h4 className='CardDeck-exp'> Total Experience: {this.props.exp} </h4>\n                <div className='CardDeck-cards'>\n                    {this.props.pokemon.map(pokem => (\n                        <Card \n                            id={pokem.id} \n                            name={pokem.name} \n                            type={pokem.type} \n                            exp={pokem.base_experience}\n                            key={pokem.id}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CardDeck;\n","import React, { Component } from 'react';\nimport CardDeck from './CardDeck';\n\nclass Game extends Component {\n    static defaultProps = {\n        pokemon: [\n            {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\n            {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\n            {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\n            {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\n            {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\n            {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\n            {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\n            {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\n        ]\n    };\n    render(){\n        let hand1 = [];\n        let hand2 = [...this.props.pokemon];\n        while (hand1.length < hand2.length) {\n            let randomIndex = Math.floor(Math.random() * hand2.length);\n            let randomPokemon = hand2.splice(randomIndex, 1)[0];\n            hand1.push(randomPokemon);\n        }\n        let experienceHand1 = hand1.reduce((accumulator, pokemon) => accumulator + pokemon.base_experience, 0);\n        let experienceHand2 = hand2.reduce((accumulator, pokemon) => accumulator + pokemon.base_experience, 0);\n         \n        return(\n            <div>\n                <CardDeck \n                    pokemon={hand1} \n                    exp={experienceHand1} \n                    isWinner={experienceHand1 > experienceHand2}\n                />\n                <CardDeck \n                    pokemon={hand2} \n                    exp={experienceHand2} \n                    isWinner={experienceHand1 < experienceHand2}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> Refresh the browser to play!</h1>\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}